substitutions:
    name: "upk2esphome_bk7231n"
    prefix: "homeassistant"

globals:
  - id: name
    type: std::string
    restore_value: no
    initial_value: "\"upk2esphome_bk7231n\""
    
  - id: prefix
    type: std::string
    restore_value: no
    initial_value: "\"homeassistant\""

esphome:
  name: "upk2esphome-bk7231n"

bk72xx:
  board: generic-bk7231n-qfn32-tuya

# https://upk.libretiny.eu/?profile=tuya-generic-universal-ir-remote-control-cbu-v2.0.0

logger:
  level: VERBOSE
  logs:
    mqtt.component: DEBUG
    mqtt.client: ERROR

web_server:

captive_portal:

mdns:

api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:

mqtt:
  broker: !secret mqtt_broker 
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: True
  on_message:
    topic: ${name}/ir/lg_send
    then:
    - remote_transmitter.transmit_lg:
        data: !lambda |-
          return strtoul(x.c_str(), NULL, 10);
        nbits: 32

# 10 instead of 16 for decimal instead of hex because i couldn't find the opposite and changing this was easier
# https://community.home-assistant.io/t/esphome-using-mqtt-values-with-remote-transmitter/174462/13

button:
  - platform: restart
    name: Restart

debug:
  update_interval: 30s

text_sensor:
  - platform: debug
    reset_reason:
      name: Reset Reason
  - platform: libretiny
    version:
      name: LibreTiny Version

sensor:
  - platform: uptime
    name: Uptime

status_led:
  pin: P24

remote_transmitter:
  pin: P7
  carrier_duty_percent: 50%

remote_receiver:
  pin:
    number: "P8"
    inverted: true
    mode: INPUT_PULLUP
  on_lg:
    then:
      - mqtt.publish:
          topic: ${name}/ir/lg_receive
          payload: !lambda |-
            char str[11];
            snprintf(str, sizeof str, "%lu", (unsigned long)x.data);
            return str;
            
      - mqtt.publish:
          topic: !lambda |-
            char str[11];
            snprintf(str, sizeof(str), "%lu", (unsigned long)x.data);
            return id(prefix) + "/button/" + id(name) + "/" + str + "/config";
          payload: !lambda |-
            char str[11];
            snprintf(str, sizeof(str), "%lu", (unsigned long)x.data);
            std::string button_config = std::string("{\"dev\": {")
                + "\"ids\": \"" + id(name) + str + "\","
                + "\"name\": \"" + id(name) + " " + str + "\""
                + "},"
                + "\"o\": {"
                + "\"name\": \"ir2mqtt\","
                + "\"sw\": \"1.0\","
                + "\"url\": \"https://github.com/Undack/ir2mqtt\""
                + "},"
                + "\"platform\": \"button\","
                + "\"name\": \"" + id(name) + " " + str + " Send\","
                + "\"unique_id\": \"" + id(name) + "_lg_send_" + str + "\","
                + "\"command_topic\": \"" + id(name) + "/ir/lg_send\","
                + "\"payload_press\": \"" + str + "\","
                + "\"retain\": \"false\"}";
            return button_config;

      - mqtt.publish:
          topic: !lambda |-
            char str[11];
            snprintf(str, sizeof(str), "%lu", (unsigned long)x.data);
            return id(prefix) + "/binary_sensor/" + id(name) + "/" + str + "/config";
          payload: !lambda |-
            char str[11];
            snprintf(str, sizeof(str), "%lu", (unsigned long)x.data);
            // Define button variables
            std::string binary_sensor_config = std::string("{\"dev\": {")
                + "\"ids\": \"" + id(name) + str + "\","
                + "\"name\": \"" + id(name) + " " + str + "\""
                + "},"
                + "\"o\": {"
                + "\"name\": \"ir2mqtt\","
                + "\"sw\": \"1.0\","
                + "\"url\": \"https://github.com/Undack/ir2mqtt\""
                + "},"
                + "\"platform\": \"binary_sensor\","
                + "\"name\": \"" + id(name) + " " + str + " Receive\","
                + "\"unique_id\": \"" + id(name) + "_lg_receive_" + str + "\","
                + "\"state_topic\": \"" + id(name) + "/ir/lg_receive\","
                + "\"payload_on\": \"" + std::string(str) + "\","
                + "\"off_delay\": \"1\","
                + "\"retain\": \"false\"}";
            return binary_sensor_config;

# https://www.home-assistant.io/integrations/mqtt/#mqtt-discovery
# https://community.home-assistant.io/t/remote-receiver-to-mqtt/324559
# https://cboard.cprogramming.com/c-programming/104485-how-convert-uint32_t-string.html
